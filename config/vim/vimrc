syntax on

set expandtab				" Expand tabs to spaces.
set filetype=text
"set foldenable				" Enable tab folding
"set foldmethod=indent		" Set fold for indented lines.
set hlsearch				" Highlight search results.
set incsearch				" Start highlighting at search.
set lazyredraw				" Don't rerender the screen.
set number					" Enable line numbers.
set shiftwidth=4			" Indents will have a width of 4.
set showmatch				" Match brackets.
set softtabstop=4			" Sets the number of columns for a TAB.
set spelllang=en_us			" Set spellcheck language.
set tabstop=4				" The width of a TAB is set to 4.
set noshowmode
set laststatus=2

colorscheme wal

cnoreabbrev nt NERDTree
cnoreabbrev nT NERDTreeToggle

filetype indent on

" Docker config --------------------------------------------------
autocmd BufNewFile docker-compose.y*ml
	\ :0r ~/.vim/templates/docker-compose.yml

" JSON config ----------------------------------------------------
autocmd BufRead *.json
	\ set filetype=json

" LaTeX config ---------------------------------------------------
autocmd BufNewFile *.tex
    \ :0!mkdir ./images             |
    \ :0r ~/.vim/templates/latex

" Makefile config ------------------------------------------------
autocmd FileType make
	\ set noexpandtab               |
	\ set shiftwidth=8              |
	\ set softtabstop=0

" Pkgbuild config ------------------------------------------------
autocmd BufRead,BufNewfile PKGBUILD
    \ set autoindent                |
    \ set expandtab                 |
    \ set fileformat=unix           |
    \ set filetype=PKGBUILD         |
    \ set noexpandtab               |
    \ set shiftwidth=2              |
    \ set softtabstop=2

" Python/YAML config ---------------------------------------------
autocmd BufNewFile *.py
	\ 0r ~/.vim/templates/python

autocmd BufRead,BufNewfile *.ps1
    \ set tabstop=2                 |
    \ set softtabstop=2             |
    \ set shiftwidth=2              |
    \ set expandtab

autocmd Filetype python,yaml
	\ set modeline                  |
    \ set autoindent                |
    \ set expandtab                 |
    \ set fileformat=unix           |
    \ set textwidth=120

autocmd BufNewFile *.sh
    \ :0r ~/.vim/templates/sh


" Terraform config
autocmd BufNewFile *.tf
    \ 0r ~/.vim/templates/terraform

let g:lightline = {
  \ 'colorscheme': 'wal',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename', 'modified', 'gitbranch' ] ],
  \   'right': [ [ 'filetype', 'percent', 'lineinfo' ] ]
  \ },
  \ 'component_function': {
  \     'explorer_pad': 'lightline#explorer_pad#left_pad',
  \     'percent': 'LightlinePercent',
  \     'lineinfo': 'LightlineLineinfo',
  \     'filename': 'LightlineFilename',
  \     'fullname': 'LightlineFullname',
  \     'gitbranch': 'gitbranch#name',
  \     'readonly': 'LightlineReadonly',
  \     'modified': 'LightlineModified',
  \ },
  \   'component_expand': {
  \     'buffers': 'lightline#bufferline#buffers',
  \     'smarttabs': 'SmartTabsIndicator',
  \     'trailing': 'lightline#trailing_whitespace#component'
  \   },
  \   'component_type': {
  \     'buffers': 'tabsel',
  \     'trailing': 'warning'
  \   }
  \ }

function! s:trim(maxlen, str) abort
    let trimed = len(a:str) > a:maxlen ? a:str[0:a:maxlen] . '..' : a:str
    return trimed
endfunction

function! LightlinePercent() abort
    if winwidth(0) < 60
        return ''
    endif

    let l:percent = line('.') * 100 / line('$') . '%'
    return printf('%-4s', l:percent)
endfunction

function! LightlineLineinfo() abort
    if winwidth(0) < 86
        return ''
    endif

    let l:current_line = printf('%-3s', line('.'))
    let l:max_line = printf('%-3s', line('$'))
    let l:lineinfo = ' ' . l:current_line . '/' . l:max_line
    return l:lineinfo
endfunction

function! LightlineFilename() abort
    let l:prefix = expand('%:p') =~? "fugitive://" ? '(fugitive) ' : ''
    let l:maxlen = winwidth(0) - winwidth(0) / 2
    let l:relative = expand('%:.')
    let l:tail = expand('%:t')
    let l:noname = 'No Name'

    if winwidth(0) < 50
        return ''
    endif

    if winwidth(0) < 86
        return l:tail ==# '' ? l:noname : l:prefix . s:trim(l:maxlen, l:tail)
    endif

    return l:relative ==# '' ? l:noname : l:prefix . s:trim(l:maxlen, l:relative)
endfunction

function! LightlineFullname() abort
    let l:relative = expand('%')

    return l:relative
endfunction

function! LightlineModified() abort
    return &modified ? '●' : ''
endfunction

function! LightlineReadonly() abort
    let ftmap = {
                \ 'coc-explorer': '',
                \ 'fugitive': '',
                \ 'vista': ''
                \ }
    let l:char = get(ftmap, &filetype, '')
    return &readonly ? l:char : ''
endfunction

function! String2()
    return 'BUFFERS'
endfunction

function! SmartTabsIndicator() abort
    let tabs = lightline#tab#tabnum(tabpagenr())
    let tab_total = tabpagenr('$')
    return tabpagenr('$') > 1 ? ('TABS ' . tabs . '/' . tab_total) : ''
endfunction

" autoreload
command! LightlineReload call LightlineReload()

function! LightlineReload() abort
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
endfunction

let g:lightline#trailing_whitespace#indicator = ''
